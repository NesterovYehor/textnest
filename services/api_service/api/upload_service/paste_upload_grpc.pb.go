// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: paste_upload/paste_upload.proto

package paste_upload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasteUpload_UploadPaste_FullMethodName             = "/pasteupload.PasteUpload/UploadPaste"
	PasteUpload_UploadUpdates_FullMethodName           = "/pasteupload.PasteUpload/UploadUpdates"
	PasteUpload_ExpirePaste_FullMethodName             = "/pasteupload.PasteUpload/ExpirePaste"
	PasteUpload_ExpireAllPastesByUserID_FullMethodName = "/pasteupload.PasteUpload/ExpireAllPastesByUserID"
)

// PasteUploadClient is the client API for PasteUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Upload RPC definition
type PasteUploadClient interface {
	UploadPaste(ctx context.Context, in *UploadPasteRequest, opts ...grpc.CallOption) (*UploadPasteResponse, error)
	UploadUpdates(ctx context.Context, in *UploadUpdatesRequest, opts ...grpc.CallOption) (*UploadUpdatesResponse, error)
	ExpirePaste(ctx context.Context, in *ExpirePasteRequest, opts ...grpc.CallOption) (*ExpirePasteResponse, error)
	ExpireAllPastesByUserID(ctx context.Context, in *ExpireAllPastesByUserIDRequest, opts ...grpc.CallOption) (*ExpireAllPastesByUserIDResponse, error)
}

type pasteUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewPasteUploadClient(cc grpc.ClientConnInterface) PasteUploadClient {
	return &pasteUploadClient{cc}
}

func (c *pasteUploadClient) UploadPaste(ctx context.Context, in *UploadPasteRequest, opts ...grpc.CallOption) (*UploadPasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPasteResponse)
	err := c.cc.Invoke(ctx, PasteUpload_UploadPaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteUploadClient) UploadUpdates(ctx context.Context, in *UploadUpdatesRequest, opts ...grpc.CallOption) (*UploadUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadUpdatesResponse)
	err := c.cc.Invoke(ctx, PasteUpload_UploadUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteUploadClient) ExpirePaste(ctx context.Context, in *ExpirePasteRequest, opts ...grpc.CallOption) (*ExpirePasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpirePasteResponse)
	err := c.cc.Invoke(ctx, PasteUpload_ExpirePaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteUploadClient) ExpireAllPastesByUserID(ctx context.Context, in *ExpireAllPastesByUserIDRequest, opts ...grpc.CallOption) (*ExpireAllPastesByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpireAllPastesByUserIDResponse)
	err := c.cc.Invoke(ctx, PasteUpload_ExpireAllPastesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasteUploadServer is the server API for PasteUpload service.
// All implementations must embed UnimplementedPasteUploadServer
// for forward compatibility.
//
// Upload RPC definition
type PasteUploadServer interface {
	UploadPaste(context.Context, *UploadPasteRequest) (*UploadPasteResponse, error)
	UploadUpdates(context.Context, *UploadUpdatesRequest) (*UploadUpdatesResponse, error)
	ExpirePaste(context.Context, *ExpirePasteRequest) (*ExpirePasteResponse, error)
	ExpireAllPastesByUserID(context.Context, *ExpireAllPastesByUserIDRequest) (*ExpireAllPastesByUserIDResponse, error)
	mustEmbedUnimplementedPasteUploadServer()
}

// UnimplementedPasteUploadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasteUploadServer struct{}

func (UnimplementedPasteUploadServer) UploadPaste(context.Context, *UploadPasteRequest) (*UploadPasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPaste not implemented")
}
func (UnimplementedPasteUploadServer) UploadUpdates(context.Context, *UploadUpdatesRequest) (*UploadUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUpdates not implemented")
}
func (UnimplementedPasteUploadServer) ExpirePaste(context.Context, *ExpirePasteRequest) (*ExpirePasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpirePaste not implemented")
}
func (UnimplementedPasteUploadServer) ExpireAllPastesByUserID(context.Context, *ExpireAllPastesByUserIDRequest) (*ExpireAllPastesByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireAllPastesByUserID not implemented")
}
func (UnimplementedPasteUploadServer) mustEmbedUnimplementedPasteUploadServer() {}
func (UnimplementedPasteUploadServer) testEmbeddedByValue()                     {}

// UnsafePasteUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasteUploadServer will
// result in compilation errors.
type UnsafePasteUploadServer interface {
	mustEmbedUnimplementedPasteUploadServer()
}

func RegisterPasteUploadServer(s grpc.ServiceRegistrar, srv PasteUploadServer) {
	// If the following call pancis, it indicates UnimplementedPasteUploadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasteUpload_ServiceDesc, srv)
}

func _PasteUpload_UploadPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteUploadServer).UploadPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteUpload_UploadPaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteUploadServer).UploadPaste(ctx, req.(*UploadPasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteUpload_UploadUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteUploadServer).UploadUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteUpload_UploadUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteUploadServer).UploadUpdates(ctx, req.(*UploadUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteUpload_ExpirePaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpirePasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteUploadServer).ExpirePaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteUpload_ExpirePaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteUploadServer).ExpirePaste(ctx, req.(*ExpirePasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteUpload_ExpireAllPastesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireAllPastesByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteUploadServer).ExpireAllPastesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteUpload_ExpireAllPastesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteUploadServer).ExpireAllPastesByUserID(ctx, req.(*ExpireAllPastesByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasteUpload_ServiceDesc is the grpc.ServiceDesc for PasteUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasteUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pasteupload.PasteUpload",
	HandlerType: (*PasteUploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPaste",
			Handler:    _PasteUpload_UploadPaste_Handler,
		},
		{
			MethodName: "UploadUpdates",
			Handler:    _PasteUpload_UploadUpdates_Handler,
		},
		{
			MethodName: "ExpirePaste",
			Handler:    _PasteUpload_ExpirePaste_Handler,
		},
		{
			MethodName: "ExpireAllPastesByUserID",
			Handler:    _PasteUpload_ExpireAllPastesByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paste_upload/paste_upload.proto",
}
