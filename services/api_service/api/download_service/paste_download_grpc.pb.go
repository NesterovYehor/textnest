// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: paste_download/paste_download.proto

package paste_download

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasteDownload_DownloadByKey_FullMethodName    = "/pastedownload.PasteDownload/DownloadByKey"
	PasteDownload_DownloadByUserId_FullMethodName = "/pastedownload.PasteDownload/DownloadByUserId"
)

// PasteDownloadClient is the client API for PasteDownload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DownloadService provides methods for downloading objects.
type PasteDownloadClient interface {
	// Download retrieves an object by its key.
	DownloadByKey(ctx context.Context, in *DownloadByKeyRequest, opts ...grpc.CallOption) (*DownloadByKeyResponse, error)
	// DownloadByUserId retrieves a slice of objects based on userId, with pagination.
	DownloadByUserId(ctx context.Context, in *DownloadByUserIdRequest, opts ...grpc.CallOption) (*DownloadByUserIdResponse, error)
}

type pasteDownloadClient struct {
	cc grpc.ClientConnInterface
}

func NewPasteDownloadClient(cc grpc.ClientConnInterface) PasteDownloadClient {
	return &pasteDownloadClient{cc}
}

func (c *pasteDownloadClient) DownloadByKey(ctx context.Context, in *DownloadByKeyRequest, opts ...grpc.CallOption) (*DownloadByKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadByKeyResponse)
	err := c.cc.Invoke(ctx, PasteDownload_DownloadByKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteDownloadClient) DownloadByUserId(ctx context.Context, in *DownloadByUserIdRequest, opts ...grpc.CallOption) (*DownloadByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadByUserIdResponse)
	err := c.cc.Invoke(ctx, PasteDownload_DownloadByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasteDownloadServer is the server API for PasteDownload service.
// All implementations must embed UnimplementedPasteDownloadServer
// for forward compatibility.
//
// DownloadService provides methods for downloading objects.
type PasteDownloadServer interface {
	// Download retrieves an object by its key.
	DownloadByKey(context.Context, *DownloadByKeyRequest) (*DownloadByKeyResponse, error)
	// DownloadByUserId retrieves a slice of objects based on userId, with pagination.
	DownloadByUserId(context.Context, *DownloadByUserIdRequest) (*DownloadByUserIdResponse, error)
	mustEmbedUnimplementedPasteDownloadServer()
}

// UnimplementedPasteDownloadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasteDownloadServer struct{}

func (UnimplementedPasteDownloadServer) DownloadByKey(context.Context, *DownloadByKeyRequest) (*DownloadByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadByKey not implemented")
}
func (UnimplementedPasteDownloadServer) DownloadByUserId(context.Context, *DownloadByUserIdRequest) (*DownloadByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadByUserId not implemented")
}
func (UnimplementedPasteDownloadServer) mustEmbedUnimplementedPasteDownloadServer() {}
func (UnimplementedPasteDownloadServer) testEmbeddedByValue()                       {}

// UnsafePasteDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasteDownloadServer will
// result in compilation errors.
type UnsafePasteDownloadServer interface {
	mustEmbedUnimplementedPasteDownloadServer()
}

func RegisterPasteDownloadServer(s grpc.ServiceRegistrar, srv PasteDownloadServer) {
	// If the following call pancis, it indicates UnimplementedPasteDownloadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasteDownload_ServiceDesc, srv)
}

func _PasteDownload_DownloadByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteDownloadServer).DownloadByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteDownload_DownloadByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteDownloadServer).DownloadByKey(ctx, req.(*DownloadByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteDownload_DownloadByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteDownloadServer).DownloadByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteDownload_DownloadByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteDownloadServer).DownloadByUserId(ctx, req.(*DownloadByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasteDownload_ServiceDesc is the grpc.ServiceDesc for PasteDownload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasteDownload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pastedownload.PasteDownload",
	HandlerType: (*PasteDownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadByKey",
			Handler:    _PasteDownload_DownloadByKey_Handler,
		},
		{
			MethodName: "DownloadByUserId",
			Handler:    _PasteDownload_DownloadByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paste_download/paste_download.proto",
}
